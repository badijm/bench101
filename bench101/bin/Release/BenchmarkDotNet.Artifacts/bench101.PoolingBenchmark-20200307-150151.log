// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
BuildScript: C:\Users\maxkp\source\repos\bench101\bench101\bin\Release\9d6aa809-901d-4e09-9ada-2e67d41efa4d.bat
// ***** Done, took 00:00:03 (3.33 sec)   *****
// Found 2 benchmarks:
//   PoolingBenchmark.VersionObjectArray: DefaultJob
//   PoolingBenchmark.VersionClassArrayPool: DefaultJob

// **************************
// Benchmark: PoolingBenchmark.VersionObjectArray: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\maxkp\source\repos\bench101\bench101\bin\Release\9d6aa809-901d-4e09-9ada-2e67d41efa4d.exe --benchmarkName "bench101.PoolingBenchmark.VersionObjectArray" --job "Default" --benchmarkId 0 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (4.7.3062.0), X86 LegacyJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 402405.19 ns, 402.4052 us/op

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at bench101.PoolingBenchmark.VersionObjectArray() in C:\Users\maxkp\source\repos\bench101\bench101\Pooling\PoolingBenchmark.cs:line 26
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionNoUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineFactory.Jit(Engine engine, Int32 jitIndex, Int32 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
// Benchmark Process 1248 has exited with code -1
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: PoolingBenchmark.VersionClassArrayPool: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\maxkp\source\repos\bench101\bench101\bin\Release\9d6aa809-901d-4e09-9ada-2e67d41efa4d.exe --benchmarkName "bench101.PoolingBenchmark.VersionClassArrayPool" --job "Default" --benchmarkId 1 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (4.7.3062.0), X86 LegacyJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 368194.34 ns, 368.1943 us/op

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at bench101.PoolingBenchmark.VersionClassArrayPool() in C:\Users\maxkp\source\repos\bench101\bench101\Pooling\PoolingBenchmark.cs:line 42
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionNoUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineFactory.Jit(Engine engine, Int32 jitIndex, Int32 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineFactory.CreateReadyToRun(EngineParameters engineParameters)
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
// Benchmark Process 4316 has exited with code -1
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\bench101.PoolingBenchmark-report.csv
  BenchmarkDotNet.Artifacts\results\bench101.PoolingBenchmark-report-github.md
  BenchmarkDotNet.Artifacts\results\bench101.PoolingBenchmark-report.html

// * Detailed results *
PoolingBenchmark.VersionObjectArray: DefaultJob
Runtime = ; GC = 
There are not any results runs

PoolingBenchmark.VersionClassArrayPool: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.12.0, OS=Windows 10.0.16299.125 (1709/FallCreatorsUpdate/Redstone3)
Intel Core i7-3517U CPU 1.90GHz (Ivy Bridge), 1 CPU, 4 logical and 2 physical cores
Frequency=2338439 Hz, Resolution=427.6357 ns, Timer=TSC
  [Host] : .NET Framework 4.7.2 (4.7.3062.0), X86 LegacyJIT


|                Method | Mean | Error | Ratio | RatioSD |
|---------------------- |-----:|------:|------:|--------:|
|    VersionObjectArray |   NA |    NA |     ? |       ? |
| VersionClassArrayPool |   NA |    NA |     ? |       ? |

Benchmarks with issues:
  PoolingBenchmark.VersionObjectArray: DefaultJob
  PoolingBenchmark.VersionClassArrayPool: DefaultJob

// * Warnings *
BaselineCustomAnalyzer
  Summary -> A question mark '?' symbol indicates that it was not possible to compute the (Ratio, RatioSD) column(s) because the baseline value is too close to zero.

// * Legends *
  Mean    : Arithmetic mean of all measurements
  Error   : Half of 99.9% confidence interval
  Ratio   : Mean of the ratio distribution ([Current]/[Baseline])
  RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])
  1 ns    : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:01 (1.79 sec), executed benchmarks: 2

Global total time: 00:00:05 (5.14 sec), executed benchmarks: 2
// * Artifacts cleanup *
